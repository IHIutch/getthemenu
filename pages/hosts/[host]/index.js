import React, { useEffect, useMemo, useState } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import NextLink from 'next/link'
import { apiGetRestaurants } from '@/controllers/restaurants'
import {
  Box,
  Button,
  ButtonGroup,
  Center,
  Heading,
  Link,
  Stack,
  Text,
  Select,
  Image,
  Flex,
  Spinner,
  AspectRatio,
  Container,
} from '@chakra-ui/react'
import { apiGetMenus } from '@/controllers/menus'
import { apiGetMenuItems } from '@/controllers/menuItems'
import { apiGetSections } from '@/controllers/sections'
import { Blurhash } from 'react-blurhash'
import { getPublicURL } from '@/utils/functions'

export default function RestaurantHome({
  host,
  restaurant,
  menus,
  menuItems,
  sections,
}) {
  const router = useRouter()
  const { query } = router
  // console.log({ host, query })

  const [currentMenuSlug, setCurrentMenuSlug] = useState(query?.slug || 0)

  const currentMenu = useMemo(() => {
    console.log({ currentMenuSlug })
    return menus.find((m) => m.id === currentMenuSlug)
  }, [currentMenuSlug, menus])

  useEffect(() => {
    if (!currentMenu) {
      setCurrentMenuSlug(menus[0].id)
    }
  }, [currentMenu, menus])

  const currentSections = useMemo(() => {
    return sections.filter((m) => m.menuId === currentMenuSlug)
  }, [currentMenuSlug, sections])

  const currentItems = useMemo(() => {
    return menuItems.filter((m) => m.menuId === currentMenuSlug)
  }, [currentMenuSlug, menuItems])

  console.log({ currentMenu, currentSections, currentItems })

  return host ? (
    <>
      <Head>
        <title>{restaurant?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxW="container.sm">
        <Select
          onChange={(e) => {
            // router.push(`/${e.target.value}`)
            setCurrentMenuSlug(parseInt(e.target.value))
          }}
        >
          {menus.map((m) => (
            <option key={m.id} value={m.id}>
              {m.title}
            </option>
          ))}
        </Select>
        <Stack>
          {/* <Box>
            <Heading as="h2" fontSize="2xl">
              Restaurant
            </Heading>
            <Text as="pre" fontSize="xs">
              {JSON.stringify(restaurant, null, 2)}
            </Text>
          </Box> */}
          <Box>
            <Heading as="h2" fontSize="3xl">
              {currentMenu?.title}
            </Heading>
          </Box>
          <Box>
            {currentSections && (
              <Stack spacing="16">
                {currentSections.map((section) => (
                  <Box key={section.id}>
                    <Heading as="h3" fontSize="2xl" mb="4">
                      {section.title}
                    </Heading>
                    {currentItems && (
                      <Stack spacing="4">
                        {currentItems
                          .filter((item) => item.sectionId === section.id)
                          .map((item) => (
                            <Box
                              key={item.id}
                              borderWidth="1px"
                              rounded="md"
                              overflow="hidden"
                              bg="white"
                              shadow="sm"
                            >
                              <AspectRatio
                                ratio={16 / 9}
                                mb="2"
                                borderBottomWidth="1px"
                              >
                                <Image
                                  h="100%"
                                  w="100%"
                                  objectFit="cover"
                                  src={
                                    item?.image?.src
                                      ? getPublicURL(item.image.src)
                                      : ''
                                  }
                                  fallback={
                                    item?.image?.blurDataURL ? (
                                      <Box>
                                        <Blurhash
                                          hash={item.image.blurDataURL}
                                          width={800}
                                          height={400}
                                          resolutionX={1600}
                                          resolutionY={900}
                                          punch={1}
                                        />
                                      </Box>
                                    ) : (
                                      <Flex align="center" justify="center">
                                        <Spinner size="sm" />
                                      </Flex>
                                    )
                                  }
                                />
                              </AspectRatio>
                              <Box p="4">
                                <Heading as="h4" fontSize="lg">
                                  {item.title}
                                </Heading>
                                <Text fontWeight="semibold">${item.price}</Text>
                                <Text>{item.description}</Text>
                              </Box>
                            </Box>
                          ))}
                      </Stack>
                    )}
                  </Box>
                ))}
              </Stack>
            )}
          </Box>
          {/* <Box>
            <Heading as="h2" fontSize="2xl">
              Sections
            </Heading>
            <Text as="pre">{JSON.stringify(sections, null, 2)}</Text>
          </Box> */}
          {/* <Box>
            <Heading as="h2" fontSize="2xl">
              Menus
            </Heading>
            <Text as="pre">{JSON.stringify(menus, null, 2)}</Text>
          </Box> */}
          {/* <Box>
            <Heading as="h2" fontSize="2xl">
              Menu Items
            </Heading>
            <Text as="pre">{JSON.stringify(menuItems, null, 2)}</Text>
          </Box> */}
        </Stack>
      </Container>
    </>
  ) : (
    <>
      <Head>
        <title>GetTheMenu</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Center h="100%">
        <Box>
          <Heading as="h1">GetTheMenu</Heading>
          <ButtonGroup>
            <NextLink href="/register" passHref>
              <Button as={Link} colorScheme="blue">
                Register
              </Button>
            </NextLink>
            <NextLink href="/login" passHref>
              <Button as={Link}>Log In</Button>
            </NextLink>
          </ButtonGroup>
        </Box>
      </Center>
    </>
  )
}

export async function getServerSideProps(context) {
  // console.log('getServerSideProps', context)
  const host =
    context.params.host !== 'getthemenu.io' &&
    context.params.host !== 'localhost'
      ? context.params.host.split('.')[0]
      : 'hello'

  let restaurants, restaurant, menus, menuItems, sections
  if (host) {
    restaurants = await apiGetRestaurants({
      subdomain: host,
    })
    restaurant = restaurants[0]
    menus = await apiGetMenus({
      restaurantId: restaurant.id,
    })
    menuItems = await apiGetMenuItems({
      restaurantId: restaurant.id,
    })
    sections = await apiGetSections({
      restaurantId: restaurant.id,
    })
  }

  return {
    props: {
      host,
      restaurant: restaurant || '',
      menus: menus || '',
      menuItems: menuItems || '',
      sections: sections || '',
    },
    // revalidate: 10,
  }
}

// export async function getStaticPaths() {
//   const restaurants = await apiGetRestaurants()
//   const paths = restaurants.map((restaurant) => ({
//     params: {
//       host: `${restaurant.subdomain}.getthemenu.io`,
//     },
//   }))

//   return {
//     paths,
//     fallback: 'blocking',
//   }
// }
