import React, { useState, useEffect } from 'react'
import { apiGetMenuItems } from '@/controllers/menuItems'
import { apiGetMenu, apiGetMenus } from '@/controllers/menus'
import { apiGetRestaurants } from '@/controllers/restaurants'
import { apiGetSections } from '@/controllers/sections'
import { useRouter } from 'next/router'
import Head from 'next/head'
import {
  AspectRatio,
  Box,
  Container,
  Flex,
  Heading,
  Stack,
  Text,
} from '@chakra-ui/layout'
import { Select } from '@chakra-ui/select'
import { Image } from '@chakra-ui/image'
import { getPublicURL } from '@/utils/functions'
import { Blurhash } from 'react-blurhash'
import { Spinner } from '@chakra-ui/spinner'
import PublicMenuLayout from '@/layouts/PublicMenu'
import { AnimatePresence, motion } from 'framer-motion'

export default function RestaurantMenu({
  slug,
  restaurant,
  menus,
  menu,
  sections,
  menuItems,
}) {
  const { push } = useRouter()
  const [activeMenu, setActiveMenu] = useState(slug)

  useEffect(() => {
    if (activeMenu !== slug) {
      push(`/${activeMenu}`)
    }
  }, [activeMenu, slug, push])

  return (
    <>
      <Head>
        <title>{restaurant?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PublicMenuLayout>
        <Box>
          <Container maxW="container.xl">
            <Select
              value={activeMenu}
              onChange={(e) => {
                setActiveMenu(e.target.value)
              }}
            >
              {menus?.map((m) => (
                <option key={m.id} value={m.id}>
                  {m.title}
                </option>
              ))}
            </Select>
            <Stack>
              {/* <Box>
            <Heading as="h2" fontSize="2xl">
              Restaurant
            </Heading>
            <Text as="pre" fontSize="xs">
              {JSON.stringify(restaurant, null, 2)}
            </Text>
          </Box> */}
              <Box>
                <Heading as="h2" fontSize="3xl">
                  {menu?.title}
                </Heading>
              </Box>
              <Box>
                {sections && (
                  <Stack spacing="16">
                    {sections.map((section) => (
                      <Box key={section.id}>
                        <Heading as="h3" fontSize="2xl" mb="4">
                          {section.title}
                        </Heading>
                        {menuItems && (
                          <Stack spacing="4">
                            {menuItems
                              .filter((item) => item.sectionId === section.id)
                              .map((item) => (
                                <Box
                                  key={item.id}
                                  borderWidth="1px"
                                  rounded="md"
                                  overflow="hidden"
                                  bg="white"
                                  shadow="sm"
                                >
                                  <AspectRatio
                                    ratio={16 / 9}
                                    mb="2"
                                    borderBottomWidth="1px"
                                  >
                                    <ItemImage
                                      src={item?.image?.src}
                                      blurDataURL={item?.image?.blurDataURL}
                                    />
                                  </AspectRatio>
                                  <Box p="4">
                                    <Heading as="h4" fontSize="lg">
                                      {item.title}
                                    </Heading>
                                    <Text fontWeight="semibold">
                                      ${item.price}
                                    </Text>
                                    <Text>{item.description}</Text>
                                  </Box>
                                </Box>
                              ))}
                          </Stack>
                        )}
                      </Box>
                    ))}
                  </Stack>
                )}
              </Box>
            </Stack>
          </Container>
        </Box>
      </PublicMenuLayout>
    </>
  )
}

const ItemImage = ({ src, blurDataURL }) => {
  return src ? (
    <Image
      // as={NextImage}
      // loading="lazy"
      layout="fill"
      boxSize="100%"
      objectFit="cover"
      transition="all 0.2s ease"
      src={src}
      fallback={
        blurDataURL ? (
          <Box boxSize="100%">
            <Blurhash
              hash={blurDataURL}
              width={800}
              height={400}
              resolutionX={56}
              resolutionY={32}
              punch={1}
            />
          </Box>
        ) : (
          <Flex align="center" justify="center">
            <Spinner size="sm" />
          </Flex>
        )
      }
    />
  ) : (
    <Box boxSize="100%" bg="gray.200" />
  )
}

export async function getServerSideProps({ params: { host }, query }) {
  const slug = query?.slug

  const restaurants = await apiGetRestaurants({ subdomain: host })
  const restaurant = restaurants?.[0]

  if (!restaurant) {
    return {
      notFound: true,
    }
  }
  const menus = await apiGetMenus({ restaurantId: restaurant.id })
  const menu = await apiGetMenu(slug || menus?.[0].id)
  const sections = await apiGetSections(menu?.id && { menuId: menu.id })
  const menuItems = await apiGetMenuItems(menu?.id && { menuId: menu.id })

  return {
    props: {
      slug: slug?.[0] || null,
      menus,
      menu,
      restaurant,
      sections,
      menuItems,
    },
  }
}
