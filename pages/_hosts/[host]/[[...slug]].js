import React, { useState } from 'react'
import { apiGetMenuItems } from '@/controllers/menuItems'
import { apiGetMenu, apiGetMenus } from '@/controllers/menus'
import { apiGetRestaurants } from '@/controllers/restaurants'
import { apiGetSections } from '@/controllers/sections'
import Head from 'next/head'
import NextImage from 'next/image'
import { AspectRatio, Box, Flex, Heading, Stack, Text } from '@chakra-ui/layout'
import { Image } from '@chakra-ui/image'
import { Blurhash } from 'react-blurhash'
import { Spinner } from '@chakra-ui/spinner'
import PublicMenuLayout from '@/layouts/PublicMenu'

export default function RestaurantMenu({
  slug,
  restaurant,
  menus,
  menu,
  sections,
  menuItems,
}) {
  return (
    <>
      <Head>
        <title>{restaurant?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PublicMenuLayout restaurant={restaurant} menus={menus}>
        <Box>
          <Stack>
            {/* <Box>
            <Heading as="h2" fontSize="2xl">
              Restaurant
            </Heading>
            <Text as="pre" fontSize="xs">
              {JSON.stringify(restaurant, null, 2)}
            </Text>
          </Box> */}
            <Box>
              <Heading as="h2" fontSize="3xl">
                {menu?.title}
              </Heading>
            </Box>
            <Box>
              {sections && (
                <Stack spacing="16">
                  {sections.map((section) => (
                    <Box key={section.id}>
                      <Heading as="h3" fontSize="2xl" mb="4">
                        {section.title}
                      </Heading>
                      {menuItems && (
                        <Stack spacing="4">
                          {menuItems
                            .filter((item) => item.sectionId === section.id)
                            .map((item) => (
                              <Box
                                key={item.id}
                                borderWidth="1px"
                                rounded="md"
                                overflow="hidden"
                                bg="white"
                                shadow="sm"
                              >
                                <AspectRatio
                                  ratio={16 / 9}
                                  mb="2"
                                  borderBottomWidth="1px"
                                >
                                  <ItemImage
                                    alt={item?.title || 'Menu item'}
                                    src={item?.image?.src}
                                    blurDataURL={item?.image?.blurDataURL}
                                  />
                                </AspectRatio>
                                <Box p="4">
                                  <Heading as="h4" fontSize="lg">
                                    {item.title}
                                  </Heading>
                                  <Text fontWeight="semibold">
                                    ${item.price}
                                  </Text>
                                  <Text>{item.description}</Text>
                                </Box>
                              </Box>
                            ))}
                        </Stack>
                      )}
                    </Box>
                  ))}
                </Stack>
              )}
            </Box>
          </Stack>
        </Box>
      </PublicMenuLayout>
    </>
  )
}

const ItemImage = ({ src, blurDataURL, alt }) => {
  const [isLoaded, setIsLoaded] = useState(false)

  return src ? (
    <>
      <Image
        as={NextImage}
        position="absolute"
        opacity={isLoaded ? 1 : 0}
        loading="lazy"
        layout="fill"
        boxSize="100%"
        objectFit="cover"
        transition="all 0.2s ease"
        src={src}
        onLoad={() => setIsLoaded(true)}
        alt={alt}
      />
      <Box
        opacity={isLoaded ? 0 : 1}
        transition="all 0.2s ease"
        boxSize="100%"
        position="absolute"
      >
        {blurDataURL ? (
          <Blurhash
            hash={blurDataURL}
            width={800}
            height={400}
            resolutionX={56}
            resolutionY={32}
            punch={1}
          />
        ) : (
          <Flex align="center" justify="center">
            <Spinner size="sm" />
          </Flex>
        )}
      </Box>
    </>
  ) : (
    <Box boxSize="100%" bg="gray.200" />
  )
}

export async function getServerSideProps({ params: { host }, query }) {
  const slug = query?.slug?.[0] || null

  const restaurants = await apiGetRestaurants({ customHost: host })
  const restaurant = restaurants?.[0]

  if (!restaurant) {
    return {
      notFound: true,
    }
  }
  const menus = await apiGetMenus({ restaurantId: restaurant.id })
  const menu = await apiGetMenu(slug || menus?.[0].id)
  const sections = await apiGetSections(menu?.id && { menuId: menu.id })
  const menuItems = await apiGetMenuItems(menu?.id && { menuId: menu.id })

  return {
    props: {
      menus,
      menu,
      restaurant,
      sections,
      menuItems,
    },
  }
}
