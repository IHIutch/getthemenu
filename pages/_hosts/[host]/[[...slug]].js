import React from 'react'
import { apiGetMenuItems } from '@/controllers/menuItems'
import { apiGetMenu, apiGetMenus } from '@/controllers/menus'
import { apiGetRestaurants } from '@/controllers/restaurants'
import { apiGetSections } from '@/controllers/sections'
import Head from 'next/head'
import { AspectRatio, Box, Heading, Stack, Text } from '@chakra-ui/layout'
import PublicLayout from '@/layouts/Public'
import BlurUpImage from '@/components/common/BlurUpImage'
import { dehydrate, QueryClient } from 'react-query'
import { useGetMenus } from '@/utils/react-query/menus'
import { useGetSections } from '@/utils/react-query/sections'
import { useGetMenuItems } from '@/utils/react-query/menuItems'
import { useRouter } from 'next/router'

export default function RestaurantMenu({ restaurant, slug: initialSlug }) {
  const { query } = useRouter()
  const slug = initialSlug === query?.slug?.[0] ? initialSlug : query?.slug?.[0]
  const { data: menus } = useGetMenus({ restaurantId: restaurant.id })

  const { id: menuId } = slug
    ? menus.find((menu) => menu.slug === slug)
    : menus[0]
  const { data: menu } = useGetMenus(menuId)
  const { data: sections } = useGetSections({ menuId })
  const { data: menuItems } = useGetMenuItems({ menuId })

  return (
    <>
      <Head>
        <title>{restaurant?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PublicLayout restaurant={restaurant} menus={menus}>
        <Box>
          <Stack>
            <Box>
              <Heading as="h2" fontSize="3xl">
                {menu?.title}
              </Heading>
            </Box>
            <Box>
              {sections && (
                <Stack spacing="16">
                  {sections.map((section) => (
                    <Box key={section.id}>
                      <Heading as="h3" fontSize="2xl" mb="4">
                        {section.title}
                      </Heading>
                      {menuItems && (
                        <Stack spacing="4">
                          {menuItems
                            .filter((item) => item.sectionId === section.id)
                            .map((item) => (
                              <Box
                                key={item.id}
                                borderWidth="1px"
                                rounded="md"
                                overflow="hidden"
                                bg="white"
                                shadow="sm"
                              >
                                <AspectRatio
                                  ratio={16 / 9}
                                  mb="2"
                                  borderBottomWidth="1px"
                                >
                                  <BlurUpImage
                                    alt={item?.title || 'Menu item'}
                                    src={item?.image?.src}
                                    blurDataURL={item?.image?.blurDataURL}
                                  />
                                </AspectRatio>
                                <Box p="4">
                                  <Heading as="h4" fontSize="lg">
                                    {item.title}
                                  </Heading>
                                  <Text fontWeight="semibold">
                                    ${item.price}
                                  </Text>
                                  <Text>{item.description}</Text>
                                </Box>
                              </Box>
                            ))}
                        </Stack>
                      )}
                    </Box>
                  ))}
                </Stack>
              )}
            </Box>
          </Stack>
        </Box>
      </PublicLayout>
    </>
  )
}

export async function getServerSideProps({ params: { host }, query }) {
  const queryClient = new QueryClient()

  const slug = query?.slug?.[0] || null

  const restaurantQuery = { customHost: host }
  const restaurants = await apiGetRestaurants(restaurantQuery)

  if (!restaurants[0]) {
    return {
      notFound: true,
    }
  }

  const menusQuery = { restaurantId: restaurants[0].id }
  const menus = await apiGetMenus(menusQuery)

  const { id: menuId } = slug
    ? menus.find((menu) => menu.slug === slug)
    : menus[0]

  const menu = await apiGetMenu(menuId)
  const sections = await apiGetSections({ menuId })
  const menuItems = await apiGetMenuItems({ menuId })

  await queryClient.prefetchQuery(
    ['restaurants', restaurantQuery],
    async () => restaurants
  )

  await queryClient.prefetchQuery(['menus', menusQuery], async () => menus)

  await queryClient.prefetchQuery(['menu', menuId], async () => menu)

  await queryClient.prefetchQuery(
    ['sections', { menuId }],
    async () => sections
  )
  await queryClient.prefetchQuery(
    ['menuItems', { menuId }],
    async () => menuItems
  )

  console.log({ host, slug })

  return {
    props: {
      host,
      slug,
      restaurant: restaurants[0],
      dehydratedState: dehydrate(queryClient),
    },
  }
}
